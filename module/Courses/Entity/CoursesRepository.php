<?php

namespace Courses\Entity;

use Doctrine\ORM\EntityRepository;
use Application\Module;
/**
 * CoursesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoursesRepository extends EntityRepository
{
	public function getCoursesByType($typeSlug)
	{   
	    $q = $this->_em->createQueryBuilder()
	    	->select('c')
	    	->from('Courses\Entity\Courses', 'c')
	    	->join('c.type_courses', 't')
	    	->where('t.slug = :typeSlug')
	    	->setParameter('typeSlug', $typeSlug);
	    
	    return $q; // Retornar el objeto sin formato para el paginador
	    //return $q->getQuery()->getResult();
	}

	public function getCoursesByFilter($words, $type){
	    $q = $this->_em->createQueryBuilder()->select('c')->from('Courses\Entity\Courses', 'c');
	    $q = $q->where('c.name LIKE :words OR c.description LIKE :words OR c.metaTags LIKE :words');
	    //$q = $q->where('c.name LIKE :words OR c.description LIKE :words');
	    $q = $q->setParameter('words', '%'.$words.'%');
	    if($type > 0)
	    	$q = $q->andWhere('c.type_courses = :type')->setParameter('type', $type);
	    
	    return $q; // Retornar el objeto sin formato para el paginador
	    //return $q->getQuery()->getResult();
	}

	public function getCoursesBySearch($words, $courseTypeSlug=null){
	    $q = $this->_em->createQueryBuilder()->select('c')->from('Courses\Entity\Courses', 'c');
	    $q = $q->where('c.name LIKE :words OR c.description LIKE :words OR c.metaTags LIKE :words');
	    //$q = $q->where('c.name LIKE :words OR c.description LIKE :words');
	    $q = $q->setParameter('words', '%'.$words.'%');
	    if($courseTypeSlug){
	    	$q = $q->join('c.type_courses', 't');
	    	if($courseTypeSlug != 'todo'){
	    		$q = $q->andWhere('t.slug = :typeSlug');
	    		$q = $q->setParameter('typeSlug', $courseTypeSlug);	
	    	}
	    }
	    //var_dump($q->getQuery()); // Retornar el objeto sin formato para el paginador
	    return $q; // Retornar el objeto sin formato para el paginador
	    //return $q->getQuery()->getResult();
	}

	public function getCountCoursesBySearch($words, $courseTypeSlug=null){
	    $q = $this->_em->createQueryBuilder()->select('c')->from('Courses\Entity\Courses', 'c');
	    $q = $q->where('c.name LIKE :words OR c.description LIKE :words OR c.metaTags LIKE :words');
	    //$q = $q->where('c.name LIKE :words OR c.description LIKE :words');
	    $q = $q->setParameter('words', '%'.$words.'%');
	    if($courseTypeSlug){
	    	$q = $q->join('c.type_courses', 't');
	    	if($courseTypeSlug != 'todo'){
	    		$q = $q->andWhere('t.slug = :typeSlug');
	    		$q = $q->setParameter('typeSlug', $courseTypeSlug);	
	    	}
	    }	    
	    $q = $q->getQuery()->getResult();
	    return count($q);
	}

	public function getNewCourses(){
	    //$q = $this->_em->createQueryBuilder()->select('c')->from('Courses\Entity\Courses', 'c')->where('c.start_date > CURDATE()');
	    $q = $this->_em->createQueryBuilder()->select('c')->from('Courses\Entity\Courses', 'c')->where('c.publishedAt IS NOT NULL')->setMaxResults(50);
	    return $q; // Retornar el objeto sin formato para el paginador
	}

	public function getCountCoursesInCache($memcache = null, $mem_time_out = null){

        //$mem_time_out = $time_expire;
        $name_cache = 'mem_courses_'.COUNTRY_ABBREV;
        
        if(!$memcache->get($name_cache)){ //La data no estÃ¡ en memcache, lo recuperamos de la bd y lo colocamos en memcache
            error_reporting(E_ALL ^ E_NOTICE); //Solo si queremos cachear una entidad, evita que muestre la noticia que no se pueden serializar objetos de tipo 'private'
            $courses = $this->_em->createQueryBuilder()->select('c.id')->from('Courses\Entity\Courses', 'c')->getQuery()->getResult();
            $memcache->add($name_cache, $courses, MEMCACHE_COMPRESSED, $mem_time_out);
        }else{            
            $courses = $memcache->get($name_cache);
            //$memcache->delete($name_cache);
        }
	    
	    return count($courses);

	}

	public function getCountCoursesByType($words, $courseTypeSlug=null){
	    $q = $this->_em->createQueryBuilder();
	    $q = $q->select('t.slug, t.name, COUNT(c.id) AS cant')->from('Courses\Entity\Courses', 'c');
	    $q = $q->where('c.name LIKE :words OR c.description LIKE :words OR c.metaTags LIKE :words');
	    //$q = $q->where('c.name LIKE :words OR c.description LIKE :words');

	    $q = $q->setParameter('words', '%'.$words.'%');
	    $q = $q->join('c.type_courses', 't');
	    if($courseTypeSlug){
	    	if($courseTypeSlug != 'todo'){
	    		$q = $q->andWhere('t.slug = :typeSlug');
	    		$q = $q->setParameter('typeSlug', $courseTypeSlug);	
	    	}
	    }
	    $q = $q->groupBy('t.slug');
	    return $q->getQuery()->getResult();
	}
	
	public function getCoursesByIe($ieId){
	    $q = $this->_em->createQueryBuilder();
	    $q = $q->select('c')->from('Courses\Entity\Courses', 'c');
	    $q = $q->where('c.institutions = :ieId');
	    $q = $q->setParameter('ieId', $ieId);
	    $q = $q->join('c.type_courses', 't');
	    $q = $q->orderBy('t.id');
	    
	    return $q->getQuery()->getResult();
	}

}
